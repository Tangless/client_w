var connect = require('connect');
var compression = require('compression');
var cookieParser = require('cookie-parser');
var session = require('express-session');
var bodyParser = require('body-parser');
var serveStatic = require("serve-static");
var {core} = require("./app");

var staticSite = serveStatic('`{VIEWSDIST}`',{'index': false,'fallthrough':false,'setHeaders': function(res, path){
    res.setHeader('Access-Control-Allow-Origin', '*')
}})
var server = connect()
    .use(function(req, res, next) {
        var host = req.headers.host.replace('wanpinghui','wph');
        var sites = (`{SITES}` as any);
        var url,domain;
        for(domain in sites){
            var src = sites[domain];
            if(host.startsWith(domain)){
                url = src+req.url;
                break;
            }
        }
        if(url){
            req.url = "/"+url;
            if(domain=="`{VIEWSSITE}`"){
                staticSite(req, res, next)
            }else{
                next();
            }
        }else{
            next(new Error('not found!'));
        }
    })
    .use(compression())
    .use(bodyParser.json())
    .use(bodyParser.urlencoded({ extended: false }))
    .use(cookieParser('test'))
    .use(session({
        secret: 'test',
        resave: false,
        saveUninitialized: true,
    }))
    .use('/', function(req, res, next){core.entrance(req, res, next)})
    .use(function(req, res, next) {
        //console.log("not found")
        res.writeHead(404)
        res.end('not found!');
    })
    .use(function(err, req, res, next) {
        console.log(err.status);
        if(err.message=="not found!"){
            res.writeHead(404);
        }else{
            res.writeHead(500);
        }
        res.end(err.toString());
        
    // set locals, only providing error in development
    //res.locals.message = err.message;
    //res.locals.error = req.entrance.get('env') === 'development' ? err : {};

    // render the error page
    //res.status(err.status || 500);
        //
        
    })
    .listen(`{SITEPORT}`);

        