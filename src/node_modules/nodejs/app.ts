import * as potato from '@po-to/potato';
import * as views from './views';
import * as controllers from './controllers';
import * as url from 'url';
import * as http from 'http';
import ejs = require('ejs');

let metaDataSites:{[key:string]:string} = (`{SITES}` as any);

let siteMap = (function(sites){
    let map = {};
    for(let domain in sites){
        let folder = sites[domain];
        if(folder){
            map[folder] = domain+":"+"`{SITEPORT}`";
        }
    }
    return map;
})(metaDataSites)


export class Core extends potato.Core {
    public readonly defaultPageName =  "global/common/CommonPage";
    protected readonly _views: potato.IViews = views;
    protected readonly _controllers: potato.IControllers = controllers;
    protected readonly _rendererManager: { [key: string]: (template: string, data: any) => string } = {
        renderer: function (template: string, data: any) {
            //return template;
            //console.log(template,data);
            return ejs.render(template, data);
        }
    }
    entrance(req: http.IncomingMessage, res: http.ServerResponse, next: (error?: potato.PError) => void) {
        let urlStr:string=req.url as string;
        let urlData = url.parse(urlStr, true);
        if(req.method=="GET"){
            let page:string|undefined = urlData.query['__page__'];
            if(page==undefined){
                ///m/?aaa=2 => /m/common/CommonPage?__content__=%2Fm%2F%3Faaa%3D2
                urlStr = url.format({ pathname: '/m/common/CommonPage', query: {__content__:urlStr} });
            }else if(page){
                ///m/?aaa=2&__page__=/www/List => /www/List?__content__=%2Fm%2F%3Faaa%3D2
                urlStr = url.format({ pathname: page, query: {__content__:urlStr.replace(/&?\__page__=[^&]*/,'')} });
            }else{
                ///m/?aaa=2&__page__= => /m/?aaa=2
                urlStr = urlStr.replace(/&?\__page__=[^&]*/,'');
            }
            //console.log(req.url,'=>',urlStr);
            req.url = urlStr;
        }
        super.entrance(req,res,next);
    }
    toUrl(req:potato.Request|potato.View,method:string='GET'): string {
        let str = super.toUrl(req);
        if (req instanceof potato.View) {
            return "`{VIEWSURL}`" +  '/' +str;
        }else{
            str += (str.indexOf("?")>-1?"&":"?")+'__page__=';
            // let urlData = url.parse(str, true);
            // urlData.query['__page__']='';
            // str = url.format({ pathname: urlData.pathname, query: urlData.query });
            for(let folder in siteMap){
                if(str.startsWith(folder)){
                    return "`{HTTP}`"+siteMap[folder] + str.replace(folder,'');
                }
            }
        }
        return '';
    }
}

export let core: Core = new Core();