import * as potato from '@po-to/potato';
import * as user from 'nodejs/global/model/user';
import * as city from 'nodejs/global/model/city';
import * as init from 'nodejs/global/model/init';
import * as demand from 'nodejs/global/model/demand';

let emptyFailHandler = function () { }
let apiServer = "`{APIURL}`";

let demand_config = {
                typeOptions: {
                    1: {
                        name: '门头屏', id: '1', def: {
                            location: '3', color: '1', span: '3',
                            locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                            colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                            spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
                        }
                    },
                    2: {
                        name: '户外广告屏', id: '2', def: {
                            location: '1', color: '3', span: '3',
                            locationOptions: { 1: { name: '户外', id: '1' } },
                            colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                            spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
                        }
                    },
                    3: {
                        name: '信息告示屏', id: '3', def: {
                            location: '1', color: '1', span: '3',
                            locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                            colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                            spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' }, },
                        }
                    },
                    4: {
                        name: '舞台用屏', id: '4', def: {
                            location: '2', color: '3', span: '2',
                            locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                            colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                            spanOptions: { 1: { name: 'P3', id: '1' }, 2: { name: 'P4', id: '2' }, 3: { name: 'P5', id: '3' }, 4: { name: '其他', id: '4' } }
                        }
                    },
                    5: {
                        name: '室内高清屏', id: '5', def: {
                            location: '2', color: '3', span: '2',
                            locationOptions: { 2: { name: '室内', id: '2' } },
                            colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                            spanOptions: { 1: { name: 'P1.25', id: '1' }, 2: { name: 'P2.0', id: '2' }, 3: { name: 'P2.5', id: '3' }, 4: { name: '其他', id: '4' } }
                        }
                    },
                    0: {
                        name: '其他', id: '0', def: {
                            location: '1', color: '3', span: '3',
                            locationOptions: { 1: { name: '户外', id: '1' }, 2: { name: '室内', id: '2' }, 3: { name: '半户外', id: '3' } },
                            colorOptions: { 1: { name: '单色', id: '1' }, 2: { name: '双色', id: '2' }, 3: { name: '全彩', id: '3' } },
                            spanOptions: { 1: { name: 'P6', id: '1' }, 2: { name: 'P8', id: '2' }, 3: { name: 'P10', id: '3' }, 4: { name: '其他', id: '4' } },
                        }
                    }
                },
                locationOptions: {
                    1: { name: '户外', id: '1' },
                    2: { name: '室内', id: '2' },
                    3: { name: '半户外', id: '3' }
                },
                colorOptions: {
                    1: { name: '单色', id: '1' },
                    2: { name: '双色', id: '2' },
                    3: { name: '全彩', id: '3' }
                },
                spanOptions: {
                    1: { name: 'P6', id: '1' },
                    2: { name: 'P8', id: '2' },
                    3: { name: 'P10', id: '3' },
                    4: { name: '其他', id: '4' },
                },
            };

export function GetInitData(rootRequest: potato.RootRequest, success?: (data: init.InitData) => void, fail?: (error: potato.PError) => void): Promise<init.InitData> {
    return Promise.all([
        GetCurCity(rootRequest),
        GetCurUser(rootRequest),
        GetCurDemand(rootRequest),
    ]).then(function (list:any) {
        let city:city.CityInfo = list[0];
        let userInfo:user.UserInfo = list[1];
        let demand:demand.DemandInfo = list[2];
        let result: init.InitData = {
            user: userInfo,
            city: city,
            selected_city: city,
            demand: demand,
            current_demand: demand,
            demand_config: demand_config,
            unread_num: {
                group_unread: '0',
                private_unread: '0'
            }
        };
        success && success(result);
        return result;
    }).catch(fail || emptyFailHandler);
}

export function GetCurCity(rootRequest: potato.RootRequest, success?: (city: city.CityInfo) => void, fail?: (error: potato.PError) => void): Promise<city.CityInfo> {
    return potato.callApi<string>({
        url: 'http://restapi.amap.com/v3/ip?ip='+rootRequest.getIP()+'&key=1c6b7d0e376ddb2744867aae0aed627c', context: rootRequest, render: function (data) {
            let result: string, json: { status: string, city: string };
            if (data instanceof potato.PError) {
                json = { status: 0 } as any;
            } else {
                json = JSON.parse(data);
            }
            if (json.status === "1") {
                result = typeof(json.city)=="string"&&json.city? json.city : '郑州';
            } else {
                result = '郑州';
            }
            return result;
        }
    }).then(
        function (cityName) {
            return potato.callApi<city.CityInfo>({
                url: apiServer + '/Supplier/getSupplierCntByCity', data: { city: cityName }, method: "POST", context: rootRequest, render: function (data) {
                    let result: city.CityInfo, json: { status: number, info: string, city_id: number, city_name: string, supplier_total: number, supplier_cnt: number };
                    if (data instanceof potato.PError) {
                        json = { status: 500 } as any;
                    } else {
                        json = JSON.parse(data);
                    }
                    if (json.status == 200) {
                        result = { 'city_id': json.city_id + '', 'city_name': json.city_name, 'city_cnt': json.supplier_cnt, all_cnt: json.supplier_total };
                    } else {
                        result = { 'city_id': '1', 'city_name': '北京', 'city_cnt': 1, all_cnt: 1 };
                    }
                    return result;
                }
            });
        }
        ).catch(fail || emptyFailHandler);
}
function mappingUser(json:any):user.UserInfo{
    json.user_type = parseInt(json.type);
    json.user_id = json.id;
    delete json.type;
    delete json.id;
    return json;
}
export function GetCurUser(rootRequest: potato.RootRequest, success?: (data: user.UserInfo) => void, fail?: (error: potato.PError) => void): Promise<user.UserInfo> {
    return potato.callApi({
        url: apiServer + '/User/getUserInfo', method: "POST", context: rootRequest, render: function (data) {
            let result: user.UserInfo, json:{ status: number, info: string};
            if (data instanceof potato.PError) {
                json = { status: 500 } as any;
            } else {
                json = JSON.parse(data);
            }
            if (json.status == 200) {
                result = mappingUser((json as any).user_info);
            }else{
                result = {
                    "nick": '',
                    "user_id": "1", //id
                    "city_id": 0, //所属城市id
                    "city_name": '', //所属城市名称
                    "phone": '', //手机
                    "sex": user.userSex.男, //性别
                    "user_type": user.userType.游客, //类型
                    "address": '', //地址
                    "avatar": '', //头像
                    "nim_user_token": "`{IMTOCKEN}`", //聊天token
                    "idcard": '', //工程商编号
                    "company_name": '', //公司名
                    "position": '', //职位
                    "activated": user.userActivated.已激活, //是否激活
                    "balance": 0, //钱包余额
                }
            }
            return result;
        }
    }, success, fail);
}
function mappingDemand(json:any):demand.DemandInfo{
    json.type_name = demand_config.typeOptions[json.type].name;
    json.location_name = demand_config.locationOptions[json.location].name;
    json.color_name = demand_config.colorOptions[json.color].name;
    return json;
}
export function GetCurDemand(rootRequest: potato.RootRequest,success?: (data: demand.DemandInfo) => void, fail?: (error: potato.PError) => void): Promise<demand.DemandInfo>{
    return potato.callApi({
        url: apiServer + '/Demand/getDemandInfo4CurrUser', method: "POST", context: rootRequest, render: function (data) {
            let result: demand.DemandInfo, json:{ status: number, info: string};
            if (data instanceof potato.PError) {
                json = { status: 500 } as any;
            } else {
                json = JSON.parse(data);
            }
            if (json.status == 200 && (json as any).demand) {
                result = mappingDemand((json as any).demand);
            }else{
                result = {
                    "user":{
                        id: '',
                        nick:'',
                        sex: 0
                    },
                    "id": "", //项目ID；
                    "city_id": "",
                    "city_name": "",
                    "address": "",
                    "type": 2,	//分类：0：其它；1：门头招牌；2：户外广告牌；3：信息告示牌；4：舞台用屏；5：室内高清屏；
                    "size": "",
                    "location": 1,  //1 => '户外', 2 => '室内', 3 => '半户外',
                    "color": 1, //1：单色，2：双色，3：全彩
                    "span": "",
                    "budget": 0, //预算，0：表示议价；
                    "image": "",	//需求场地图片
                    "status": "", //10进行中，60：交易结束
                    "intm": 0,
                    "uptm": 0,
                    "note": "",
                    "audio": "", //客服和客户之间的录音链接
                    "bid_fee": 0, //抢单服务费
                    type_name: "户外广告屏",
                    location_name: '户外',
                    color_name: "单色",
                    span_id: 1,
                    im_group:{
                        im_group_outer_id: '0',
                        client_csad_im_group_outer_id: '0',
                    },
                    supplier_list: []
                }
            }
            return result;
        }
    }, success, fail);
}
export function GetDemandList(type:number,rootRequest: potato.RootRequest,success?: (data: demand.DemandInfo[]) => void, fail?: (error: potato.PError) => void): Promise<demand.DemandInfo[]>{
    return potato.callApi({
        url: apiServer + '/Demand/getDemandList',data:{type:type,pagesize:'8'}, method: "POST", context: rootRequest, render: function (data) {
            let result: demand.DemandInfo[], json:{ status: number, info: string, list:any[]};
            if (data instanceof potato.PError) {
                json = { status: 500 } as any;
            } else {
                json = JSON.parse(data);
            }
            if (json.status == 200) {
                result = json.list.map(function(item){
                    return mappingDemand(item);
                })
            }else{
                result = [];
            }
            return result;
        }
    }, success, fail);
}
export function GetDemandListByTypes(types:number[],rootRequest: potato.RootRequest,success?: (data: demand.DemandInfo[][]) => void, fail?: (error: potato.PError) => void): Promise<demand.DemandInfo[][]>{
    return potato.callApi({
        url: apiServer + '/Demand/getDistrDemandList',data:{type:types}, method: "POST", context: rootRequest, render: function (data) {
            let result: demand.DemandInfo[][], json:{ status: number, info: string, list:{[key:string]:demand.DemandInfo[]}};
            if (data instanceof potato.PError) {
                json = { status: 500 } as any;
            } else {
                json = JSON.parse(data);
            }
            if (json.status == 200) {
                result = types.map(function(type){
                    let list = json.list[type];
                    if(list){
                        return list.map(function(item){
                            return mappingDemand(item);
                        })
                    }else{
                        return [];
                    }
                })
            }else{
                result = types.map(function(type){
                    return [];
                });
            }
            return result;
        }
    }, success, fail);
}
// export function GetDemandTypeList(type:number,rootRequest: potato.RootRequest,success?: (data: demand.DemandList) => void, fail?: (error: potato.PError) => void): Promise<demand.DemandList>{
//     return potato.callApi({
//         url: apiServer + '/Demand/getDemandList',data:{type:type,pagesize:'8'}, method: "POST", context: rootRequest, render: function (data) {
//             let result: demand.DemandList, json:{ status: number, info: string, list:any[]};
//             if (data instanceof potato.PError) {
//                 json = { status: 500 } as any;
//             } else {
//                 json = JSON.parse(data);
//             }
//             let list:demand.DemandInfo[];
//             let typeName:string = '';
//             if (json.status == 200) {
//                 list = json.list.map(function(item){
//                     return mappingDemand(item);
//                 })
//                 type doubleType = demand.DemandInfo[];
//                 let doubleList:{double:doubleType}[];
//                 doubleList = [];
//                 while(list.length){
//                     let double:doubleType = [];
//                     doubleList.push({double:double});
//                     let item = list.shift() as demand.DemandInfo;
//                     double.push(item);
//                     typeName = double[0].type_name;
//                     if(list.length){
//                         let item = list.shift() as demand.DemandInfo;
//                         double.push(item);
//                     }
//                 }
//                 result = {
//                     title: typeName,
//                     list: doubleList
//                 }                
//             }else{
//                 result = {
//                     title : "",
//                     list:[],
//                 }
//             }
//             return result;
//         }
//     }, success, fail);
// }
// export function GetDemandList(rootRequest: potato.RootRequest,success?: (data: demand.DemandList) => void, fail?: (error: potato.PError) => void): Promise<demand.DemandList>{
//     return potato.callApi({
//         url: apiServer + '/Demand/getDemandListByType',data:data, method: "POST", context: rootRequest, render: function (data) {
//             let result: demand.DemandList, json:{ status: number, info: string};
//             if (data instanceof potato.PError) {
//                 json = { status: 500 } as any;
//             } else {
//                 json = JSON.parse(data);
//             }
//             if (json.status == 200) {
                
//             }else{
//                 result = {
//                     cnt: 0,
//                     projects:[]
//                 }
//             }
//             return result;
//         }
//     }, success, fail);
// }