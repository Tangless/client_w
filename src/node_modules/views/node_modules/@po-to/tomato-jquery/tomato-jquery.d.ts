import * as tomato from "@po-to/tomato";
declare global  {
    interface JQuery {
        groupBy(attr?: string): {
            [x: string]: HTMLElement[];
        };
        removeChild(view: JQuery): void;
        appendChild(view: JQuery): void;
        setZIndex(index: number): void;
        getVPID(): string;
        setVPID(id: string): void;
        getVPCON(): string;
        getSUBS(): JQuery[];
    }
}
export declare const DialogEffect: {
    scale: string;
    swipeUp: string;
    swipeDown: string;
    swipeLeft: string;
    swipeRight: string;
    slideUp: string;
    slideDown: string;
    slideLeft: string;
    slideRight: string;
};
export declare const TurnEffect: {
    slid: string;
    cover: string;
};
export declare function getWindowSize(): {
    width: number;
    height: number;
};
export declare class CommonPageApplication extends tomato.Application {
    constructor();
}
export declare class SinglePageApplication extends tomato.Application {
    readonly view: JQuery;
    readonly dialog: JQuery;
    readonly mask: JQuery;
    readonly header: JQuery | undefined;
    readonly footer: JQuery | undefined;
    readonly aside: JQuery | undefined;
    readonly body: JQuery | undefined;
    constructor(config?: tomato.DialogConfigOptions, els?: {
        view: JQuery;
        dialog: JQuery;
        mask: JQuery;
        body?: JQuery;
        header?: JQuery;
        footer?: JQuery;
        aside?: JQuery;
    });
    refreshLayout(): void;
}
export declare class VPresenter extends tomato.VPresenter {
    protected _$dom: JQuery;
    protected _els: {
        [key: string]: Element[];
    };
    constructor(view: tomato.VPView, parent?: tomato.VPresenter, vpid?: string);
    find(str: string): JQuery;
    _evt_open(data: {
        url: string;
        target?: string;
    } | string): boolean;
    protected _getElements(): {
        [x: string]: HTMLElement[];
    };
    protected _watchEvent(funs?: {
        [key: string]: Function;
    }, jdom?: JQuery): void;
}
export declare class CommonDialog extends tomato.Dialog {
    readonly view: JQuery;
    readonly dialog: JQuery;
    readonly mask: JQuery;
    readonly header: JQuery | undefined;
    readonly footer: JQuery | undefined;
    readonly aside: JQuery | undefined;
    readonly body: JQuery | undefined;
    private _removeAfterClosed;
    constructor(config?: tomato.DialogConfigOptions, els?: {
        view: JQuery;
        dialog: JQuery;
        mask: JQuery;
        body?: JQuery;
        header?: JQuery;
        footer?: JQuery;
        aside?: JQuery;
    });
    private _animationEnd();
    protected _afterConfigChange(oldConfig: tomato.DialogConfig): void;
    protected _setState(state: tomato.DialogState): void;
    private _parseExpr(value, worh);
    refreshSize(): void;
    protected _setSize(width: number, height: number): void;
    refreshLayout(): void;
    refreshPosition(): void;
    protected _setPosition(left: number, top: number): void;
    close(removeAfterClosed?: boolean): boolean;
}
export declare function turnContainer(container: JQuery): JQuery;
export declare function setConfig(data: {
    dialogZIndexStart?: number;
}): void;
export declare const DialogTarget: {
    "Blank": string;
    "Self": string;
    "Root": string;
    "Top": string;
};
export declare function open(content: tomato.VPresenter, target?: string | tomato.Dialog, dialogOptions?: tomato.DialogConfigOptions): tomato.Dialog;
